; Listing generated by Microsoft (R) Optimizing Compiler Version 19.20.27508.1 

	TITLE	E:\Programming\Р.Лафоре\ConsoleApp\ConsoleApp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BD893278_vcruntime_new@h DB 01H
__E410F33D_corecrt_math@h DB 01H
__36B85FDF_stdlib@h DB 01H
__2845833B_cstdlib DB 01H
__6EEEB2F8_cmath DB 01H
__23AD7809_corecrt_stdio_config@h DB 01H
__DD74D44A_corecrt_wstdio@h DB 01H
__4B3541EE_stdio@h DB 01H
__7DAB1C65_type_traits DB 01H
__A2957829_malloc@h DB 01H
__2C2FD919_vcruntime_exception@h DB 01H
__4C0F20C9_exception DB 01H
__82CA083D_corecrt_memcpy_s@h DB 01H
__F8BB3D43_corecrt_memory@h DB 01H
__61E6ED1F_corecrt_wstring@h DB 01H
__B0CBCB7B_string@h DB 01H
__990BA27D_corecrt_wconio@h DB 01H
__D837D19F_corecrt_wio@h DB 01H
__FE12CC83_corecrt_wtime@h DB 01H
__01EE68DC_stat@h DB 01H
__B513A213_wchar@h DB 01H
__C68D72C9_limits DB 01H
__3EF30C1E_xutility DB 01H
__7EBC81CA_xatomic0@h DB 01H
__EFA0CD4F_xmemory0 DB 01H
__010EE3EF_xstring DB 01H
__C5411A94_stdexcept DB 01H
__D5FCEFB4_xcall_once@h DB 01H
__6AA1FD94_system_error DB 01H
__E2483D0D_vcruntime_typeinfo@h DB 01H
__7A237E47_memory DB 01H
__56662948_xfacet DB 01H
__941D13D0_ctype@h DB 01H
__51A51CCF_xlocinfo DB 01H
__DE3097DE_xlocale DB 01H
__68406BDC_xiosbase DB 01H
__40B7F1C9_xlocnum DB 01H
__1D37B13A_ios DB 01H
__DF6784BA_basetsd@h DB 01H
__73E5A5AE_guiddef@h DB 01H
__20E88E2C_winnt@h DB 01H
__B0708975_processthreadsapi@h DB 01H
__14D8E0CB_memoryapi@h DB 01H
__0A5E6AC9_winerror@h DB 01H
__95229982_winbase@h DB 01H
__FDCAD2F5_winuser@h DB 01H
__253F0A20_winioctl@h DB 01H
__CA946E7A_propidl@h DB 01H
__4B69DDF6_oleauto@h DB 01H
__7F05D861_stralign@h DB 01H
__37507236_ConsoleApp@cpp DB 01H
__AEF07820_istream DB 01H
__CD204D1A_ostream DB 01H
__C7E1A228_streambuf DB 01H
__1F4806B0_utility DB 01H
__0A64A74F_iosfwd DB 01H
__E85791A2_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp__SetConsoleOutputCP@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 119  :         explicit __CLR_OR_THIS_CALL operator bool() const { // test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 120  :             return _Ok;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 121  :         }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 104  :         __CLR_OR_THIS_CALL ~sentry() noexcept { // destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 105  : #if _HAS_EXCEPTIONS
; 106  :             if (!_STD uncaught_exception()) { // TRANSITION, OS#15518458

  0004c	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN1@sentry

; 107  :                 this->_Myostr._Osfx();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 108  :             }
; 109  : #else // _HAS_EXCEPTIONS
; 110  :             this->_Myostr._Osfx();
; 111  : #endif // _HAS_EXCEPTIONS
; 112  :         }

  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 88   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 89   :             : _Sentry_base(_Ostr) { // construct locking and testing stream

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 90   :             if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr) {

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	74 6e		 je	 SHORT $LN2@sentry
  00082	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0008a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	8b ca		 mov	 ecx, edx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	85 c0		 test	 eax, eax
  000a0	74 4e		 je	 SHORT $LN2@sentry
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000aa	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ad	8b f4		 mov	 esi, esp
  000af	8b ca		 mov	 ecx, edx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000c1	74 2d		 je	 SHORT $LN2@sentry

; 91   :                 _Ostr.tie()->flush();

  000c3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cb	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ce	8b f4		 mov	 esi, esp
  000d0	8b ca		 mov	 ecx, edx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b f4		 mov	 esi, esp
  000e1	8b c8		 mov	 ecx, eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 92   :             }
; 93   : 
; 94   :             _Ok = _Ostr.good(); // store test only after flushing tie

  000f0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000f8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000fb	8b f4		 mov	 esi, esp
  000fd	8b ca		 mov	 ecx, edx
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 95   :         }

  00112	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00119	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 75   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 76   :             if (_Myostr.rdbuf() != nullptr) {

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00057	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00065	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00068	8b f4		 mov	 esi, esp
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	85 c0		 test	 eax, eax
  00079	74 4d		 je	 SHORT $LN3@Sentry_bas

; 77   :                 _Myostr.rdbuf()->_Unlock();

  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  00086	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  00094	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00097	8b f4		 mov	 esi, esp
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	8b f4		 mov	 esi, esp
  000b6	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000bc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bf	ff d0		 call	 eax
  000c1	3b f4		 cmp	 esi, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 78   :             }
; 79   :         }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 69   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 70   :             if (_Myostr.rdbuf() != nullptr) {

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00040	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	85 c0		 test	 eax, eax
  00062	74 4d		 je	 SHORT $LN1@Sentry_bas

; 71   :                 _Myostr.rdbuf()->_Lock();

  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  0006f	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  0007d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00080	8b f4		 mov	 esi, esp
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009d	8b f4		 mov	 esi, esp
  0009f	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  000a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a8	ff d0		 call	 eax
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 72   :             }
; 73   :         }

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -356						; size = 8
tv280 = -352						; size = 4
tv275 = -352						; size = 4
tv314 = -348						; size = 8
tv279 = -348						; size = 4
tv277 = -348						; size = 4
tv274 = -348						; size = 4
tv276 = -344						; size = 4
tv65 = -344						; size = 4
tv278 = -341						; size = 1
tv273 = -341						; size = 1
$T2 = -336						; size = 4
$T3 = -324						; size = 4
$T4 = -312						; size = 4
$T5 = -300						; size = 4
$T6 = -288						; size = 4
$T7 = -276						; size = 4
$T8 = -264						; size = 4
__Pad$9 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 741  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 742  :     using _Elem = char;
; 743  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 744  : 
; 745  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 746  :     const typename _Myos::sentry _Ok(_Ostr);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	50		 push	 eax
  00059	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005c	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 747  : 
; 748  :     if (_Ok) { // state okay, insert

  00068	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0006b	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	0f 84 3a 03 00
	00		 je	 $LN8@operator

; 749  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00083	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00086	8b f4		 mov	 esi, esp
  00088	8b ca		 mov	 ecx, edx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv314[ebp], eax
  0009d	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv314[ebp+4], edx
  000a3	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv314[ebp+4], 0
  000aa	7f 18		 jg	 SHORT $LN15@operator
  000ac	7c 09		 jl	 SHORT $LN22@operator
  000ae	83 bd a4 fe ff
	ff 01		 cmp	 DWORD PTR tv314[ebp], 1
  000b5	77 0d		 ja	 SHORT $LN15@operator
$LN22@operator:
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv128[ebp], xmm0
  000c2	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000cf	8b f4		 mov	 esi, esp
  000d1	8b ca		 mov	 ecx, edx
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	83 e8 01	 sub	 eax, 1
  000e3	83 da 00	 sbb	 edx, 0
  000e6	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000ec	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000f2	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000f8	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  000fb	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  00101	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx

; 750  : 
; 751  :         _TRY_IO_BEGIN

  00104	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 752  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00108	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00110	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00113	8b f4		 mov	 esi, esp
  00115	8b ca		 mov	 ecx, edx
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0011d	3b f4		 cmp	 esi, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0012a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00130	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00135	83 f8 40	 cmp	 eax, 64			; 00000040H
  00138	0f 84 dd 00 00
	00		 je	 $LN10@operator

; 753  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  0013e	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00140	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  00143	83 e8 01	 sub	 eax, 1
  00146	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  00149	83 d9 00	 sbb	 ecx, 0
  0014c	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  0014f	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN4@operator:
  00152	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00156	0f 85 bf 00 00
	00		 jne	 $LN10@operator
  0015c	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  00160	0f 8c b5 00 00
	00		 jl	 $LN10@operator
  00166	7f 0a		 jg	 SHORT $LN23@operator
  00168	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  0016c	0f 86 a9 00 00
	00		 jbe	 $LN10@operator
$LN23@operator:

; 754  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00172	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00175	8b 08		 mov	 ecx, DWORD PTR [eax]
  00177	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0017a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0017d	8b f4		 mov	 esi, esp
  0017f	8b ca		 mov	 ecx, edx
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv273[ebp], al
  00194	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00197	8b 08		 mov	 ecx, DWORD PTR [eax]
  00199	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0019c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0019f	8b f4		 mov	 esi, esp
  001a1	8b ca		 mov	 ecx, edx
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001a9	3b f4		 cmp	 esi, esp
  001ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b0	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  001b6	8b f4		 mov	 esi, esp
  001b8	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv273[ebp]
  001bf	50		 push	 eax
  001c0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv274[ebp]
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001cc	3b f4		 cmp	 esi, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  001d9	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv275[ebp]
  001df	89 8d f8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001e5	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001ea	89 85 ec fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  001f0	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  001f6	52		 push	 edx
  001f7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00203	83 c4 08	 add	 esp, 8
  00206	0f b6 c8	 movzx	 ecx, al
  00209	85 c9		 test	 ecx, ecx
  0020b	74 09		 je	 SHORT $LN11@operator

; 755  :                     _State |= ios_base::badbit;

  0020d	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00210	83 c8 04	 or	 eax, 4
  00213	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 756  :                 }
; 757  :             }

  00216	e9 25 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  0021b	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0021f	75 7f		 jne	 SHORT $LN12@operator
  00221	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00229	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0022c	8b f4		 mov	 esi, esp
  0022e	8b ca		 mov	 ecx, edx
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00236	3b f4		 cmp	 esi, esp
  00238	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023d	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  00243	8b f4		 mov	 esi, esp
  00245	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00249	50		 push	 eax
  0024a	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00256	3b f4		 cmp	 esi, esp
  00258	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025d	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv277[ebp], eax
  00263	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv277[ebp]
  00269	89 8d e0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0026f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00274	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0027a	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00280	52		 push	 edx
  00281	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0028d	83 c4 08	 add	 esp, 8
  00290	0f b6 c8	 movzx	 ecx, al
  00293	85 c9		 test	 ecx, ecx
  00295	74 09		 je	 SHORT $LN12@operator

; 761  :             _State |= ios_base::badbit;

  00297	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0029a	83 c8 04	 or	 eax, 4
  0029d	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 762  :         }
; 763  : 
; 764  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  002a0	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a2	8b 45 c4	 mov	 eax, DWORD PTR __Pad$9[ebp]
  002a5	83 e8 01	 sub	 eax, 1
  002a8	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$9[ebp+4]
  002ab	83 d9 00	 sbb	 ecx, 0
  002ae	89 45 c4	 mov	 DWORD PTR __Pad$9[ebp], eax
  002b1	89 4d c8	 mov	 DWORD PTR __Pad$9[ebp+4], ecx
$LN7@operator:
  002b4	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002b8	0f 85 bf 00 00
	00		 jne	 $LN6@operator
  002be	83 7d c8 00	 cmp	 DWORD PTR __Pad$9[ebp+4], 0
  002c2	0f 8c b5 00 00
	00		 jl	 $LN6@operator
  002c8	7f 0a		 jg	 SHORT $LN24@operator
  002ca	83 7d c4 00	 cmp	 DWORD PTR __Pad$9[ebp], 0
  002ce	0f 86 a9 00 00
	00		 jbe	 $LN6@operator
$LN24@operator:

; 765  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002d4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002dc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002df	8b f4		 mov	 esi, esp
  002e1	8b ca		 mov	 ecx, edx
  002e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002e9	3b f4		 cmp	 esi, esp
  002eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f0	88 85 ab fe ff
	ff		 mov	 BYTE PTR tv278[ebp], al
  002f6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002fe	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00301	8b f4		 mov	 esi, esp
  00303	8b ca		 mov	 ecx, edx
  00305	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0030b	3b f4		 cmp	 esi, esp
  0030d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00312	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv279[ebp], eax
  00318	8b f4		 mov	 esi, esp
  0031a	0f b6 85 ab fe
	ff ff		 movzx	 eax, BYTE PTR tv278[ebp]
  00321	50		 push	 eax
  00322	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  00328	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0032e	3b f4		 cmp	 esi, esp
  00330	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00335	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  0033b	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv280[ebp]
  00341	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00347	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0034c	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00352	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00358	52		 push	 edx
  00359	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00365	83 c4 08	 add	 esp, 8
  00368	0f b6 c8	 movzx	 ecx, al
  0036b	85 c9		 test	 ecx, ecx
  0036d	74 09		 je	 SHORT $LN13@operator

; 766  :                 _State |= ios_base::badbit;

  0036f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00372	83 c8 04	 or	 eax, 4
  00375	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 767  :             }
; 768  :         }

  00378	e9 25 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  0037d	eb 26		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 769  :         _CATCH_IO_(ios_base, _Ostr)

  0037f	8b f4		 mov	 esi, esp
  00381	6a 01		 push	 1
  00383	6a 04		 push	 4
  00385	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00388	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00390	8b ca		 mov	 ecx, edx
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00398	3b f4		 cmp	 esi, esp
  0039a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039f	b8 00 00 00 00	 mov	 eax, $LN21@operator
  003a4	c3		 ret	 0
$LN17@operator:
  003a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ac	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  003ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 770  :     }
; 771  : 
; 772  :     _Ostr.width(0);

  003b5	8b f4		 mov	 esi, esp
  003b7	6a 00		 push	 0
  003b9	6a 00		 push	 0
  003bb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003be	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c6	8b ca		 mov	 ecx, edx
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 773  :     _Ostr.setstate(_State);

  003d5	8b f4		 mov	 esi, esp
  003d7	6a 00		 push	 0
  003d9	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003dc	50		 push	 eax
  003dd	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e0	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e2	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003e5	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003ee	3b f4		 cmp	 esi, esp
  003f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 774  :     return _Ostr;

  003f5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003f8	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00405	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00408	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0040d	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 775  : }

  00413	52		 push	 edx
  00414	8b cd		 mov	 ecx, ebp
  00416	50		 push	 eax
  00417	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@operator
  0041d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00422	58		 pop	 eax
  00423	5a		 pop	 edx
  00424	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00427	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0042e	59		 pop	 ecx
  0042f	5f		 pop	 edi
  00430	5e		 pop	 esi
  00431	5b		 pop	 ebx
  00432	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00435	33 cd		 xor	 ecx, ebp
  00437	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0043c	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00442	3b ec		 cmp	 ebp, esp
  00444	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00449	8b e5		 mov	 esp, ebp
  0044b	5d		 pop	 ebp
  0044c	c3		 ret	 0
  0044d	0f 1f 00	 npad	 3
$LN28@operator:
  00450	01 00 00 00	 DD	 1
  00454	00 00 00 00	 DD	 $LN27@operator
$LN27@operator:
  00458	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0045c	08 00 00 00	 DD	 8
  00460	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  00464	5f		 DB	 95			; 0000005fH
  00465	4f		 DB	 79			; 0000004fH
  00466	6b		 DB	 107			; 0000006bH
  00467	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 878  :     basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch) { // insert an unsigned char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __CD204D1A_ostream
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 879  :     return _Ostr << (char) _Ch;

  00028	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00036	83 c4 08	 add	 esp, 8

; 880  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\Programming\Р.Лафоре\ConsoleApp\ConsoleApp.cpp
;	COMDAT _main
_TEXT	SEGMENT
_c$ = -5						; size = 1
_main	PROC						; COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __37507236_ConsoleApp@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 7    : 	SetConsoleOutputCP(1251);

  00028	8b f4		 mov	 esi, esp
  0002a	68 e3 04 00 00	 push	 1251			; 000004e3H
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleOutputCP@4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 8    : 	unsigned  char c = 'Рџ';

  0003c	c6 45 fb cf	 mov	 BYTE PTR _c$[ebp], 207	; 000000cfH

; 9    : 	cout << c;

  00040	0f b6 45 fb	 movzx	 eax, BYTE PTR _c$[ebp]
  00044	50		 push	 eax
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@E@Z ; std::operator<<<std::char_traits<char> >
  00051	83 c4 08	 add	 esp, 8

; 10   : 	return 0;

  00054	33 c0		 xor	 eax, eax

; 11   : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\xstring
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 373  :     _NODISCARD static constexpr int_type eof() noexcept { // return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eof@?$char_traits@D@std@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __010EE3EF_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 374  :         return EOF;

  00047	83 c8 ff	 or	 eax, -1

; 375  :     }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$char_traits@D@std@@SAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\VSCommunity2019\VC\Tools\MSVC\14.20.27508\include\xstring
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 365  :         const int_type& _Left, const int_type& _Right) noexcept { // test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00020	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __010EE3EF_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 366  :         return _Left == _Right;

  00047	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00051	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00053	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0005d	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00069	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 367  :     }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\Programming\Р.Лафоре\ConsoleApp\ConsoleApp.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __37507236_ConsoleApp@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\Programming\Р.Лафоре\ConsoleApp\ConsoleApp.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __37507236_ConsoleApp@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
